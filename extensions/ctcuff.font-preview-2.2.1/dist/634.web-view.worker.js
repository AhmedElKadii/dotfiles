(function(){"use strict";var __webpack_modules__={634:function(){eval('\n;// CONCATENATED MODULE: ./src/util.ts\n/**\n * Takes an object of font variations and creates the `font-variation-settings`\n * CSS string. For example:\n * ```\n * createVariationCSS({ wght: 400, slnt: 0 }) === \'"wght" 400, "slnt" 0\'\n * ```\n */\nconst createVariationCSS = variations => {\n  return Object.entries(variations).map(_ref => {\n    let [variation, value] = _ref;\n    return "\\"".concat(variation, "\\" ").concat(value);\n  }).join(\', \');\n};\n\nconst getCSSVar = function (cssVar) {\n  let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n  const computedStyle = getComputedStyle(document.documentElement);\n  return computedStyle.getPropertyValue(cssVar).trim() || computedStyle.getPropertyValue(fallback).trim();\n};\n\nconst isTableEmpty = table => {\n  if (!table) {\n    return true;\n  }\n\n  return Object.values(table).filter(value => Array.isArray(value)).every(value => value.length === 0);\n}; // Because the file content coming from the font-provider postMessage is already\n// pretty large, we don\'t want to send another large string for the base64\n// content. This means we have to do the conversion on the webview side.\n// https://gist.github.com/jonleighton/958841\n\n\nconst base64ArrayBuffer = buffer => {\n  const encodings = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\';\n  const bytes = new Uint8Array(buffer);\n  const byteLength = bytes.byteLength;\n  const byteRemainder = byteLength % 3;\n  const mainLength = byteLength - byteRemainder;\n  let base64 = \'\';\n  let a;\n  let b;\n  let c;\n  let d;\n  let chunk; // Main loop deals with bytes in chunks of 3\n\n  for (let i = 0; i < mainLength; i += 3) {\n    // Combine the three bytes into a single integer\n    chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2]; // Use bitmasks to extract 6-bit segments from the triplet\n\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\n    b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12\n\n    c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6\n\n    d = chunk & 63; // 63 = 2^6 - 1\n    // Convert the raw binary segments to the appropriate ASCII encoding\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  } // Deal with the remaining bytes and padding\n\n\n  if (byteRemainder === 1) {\n    chunk = bytes[mainLength];\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n    // Set the 4 least significant bits to zero\n\n    b = (chunk & 3) << 4; // 3 = 2^2 - 1\n\n    base64 += "".concat(encodings[a] + encodings[b], "==");\n  } else if (byteRemainder === 2) {\n    chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\n    b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4\n    // Set the 2 least significant bits to zero\n\n    c = (chunk & 15) << 2; // 15 = 2^4 - 1\n\n    base64 += "".concat(encodings[a] + encodings[b] + encodings[c], "=");\n  }\n\n  return base64;\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js!./src/font-worker.ts\n/* eslint-disable */\n\n\nself.onmessage = message => {\n  self.postMessage(base64ArrayBuffer(message.data));\n};\n\n//# sourceURL=webpack://web/./src/font-worker.ts_+_1_modules?./node_modules/babel-loader/lib/index.js')}},__webpack_exports__={};__webpack_modules__[634]()})();